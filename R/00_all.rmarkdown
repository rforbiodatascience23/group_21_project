---
title: "00_all.qmd"
format: html
editor: visual
---

```{r}
library("quarto")
```


# 01_load data

---
title: "01_load.qmd"
format: html
editor: visual
---

```{r}
library("tidyverse")
```

```{r}
read_tsv("./../data/_raw/raw.tsv") |>
  write_tsv("../data/01_dat_load.tsv")
```



# 02_clean data

---
title: "02_clean"
format: html
editor: visual
---

### Load Tidyverse

```{r}
#| output: false
#| warning: false
library("tidyverse")
```

### Read Data

```{r}
#| message: false
#| warning: false
full_data <- read_tsv("./../data/01_dat_load.tsv")
```

### Split Data

We have extracted one column (sample_tags) that contains comma-separated values into its own dataframe. This allows us to perform separate cleaning operations on it while showcasing our proficiency in joining dataframes.

```{r}
patient_data <- full_data |>
  select(sample_name, sample_tags)

meta_data <- full_data |>
  select(!sample_tags)
```

### Clean Data

```{r}
patient_data <- patient_data |>
  mutate(case_control = case_when(str_detect(sample_tags,
                                             "Case") ~ "Case",
                                  str_detect(sample_tags,
                                             "Control") ~ "Control",
                                  TRUE ~ NA),
         
         
         id = case_when(str_detect(sample_tags, 
                                   "Subject") ~ as.double(
                                     str_extract(sample_tags,
                                                 "(?<=Subject[^,])\\d+")),
                        str_detect(sample_tags, 
                                   "Control") ~ as.double(
                                     str_extract(sample_tags,
                                                 "(?<=Control[^,])\\d+")),
                        TRUE ~ NA),
         
         timepoint = as.double(str_extract(sample_tags,
                                           "(?<=Timepoint)\\s+\\d+[.\\d+]?")),
         
         gender = case_when(str_detect(sample_tags,
                                       "Female") ~ "Female",
                            str_detect(sample_tags,
                                       "Male") ~ "Male"),
         
         ethnicity = case_when(
           str_detect(sample_tags,
                      "Non-Hispanic") ~ "Non-Hispanic",
           str_detect(sample_tags,
                      "Hispanic") ~ "Hispanic",
           TRUE ~ as.character(sample_tags)),
          
         race = case_when(
           str_detect(sample_tags,
                      "Caucasian") ~ "Caucasian",
           str_detect(sample_tags,
                      "Asian") ~ "Asian",
           TRUE ~ as.character(sample_tags)),
         
         age = round(ifelse(
           is.na(as.double(str_extract(sample_tags,
                                       "\\d+(?=\\s+(Years)\\,)"))),
           (1/12)*as.double(str_extract(sample_tags,
                                        "\\d+(?=\\s+(Months)\\,)")),
           as.double(str_extract(sample_tags,
                                 "\\d+(?=\\s+(Years)\\,)"))),2),
         
         
         age_diagnosis = as.double(
           str_extract(sample_tags,
                       "\\d*\\.\\d+(?=\\sYears\\sat\\sdiagnosis)")),
         
         
         age_visit = as.double(str_extract(sample_tags,
                                           "\\d+(?=\\sYears\\sat\\svisit)")),
         
         GAD65 = as.double(str_extract(sample_tags,
                                       "(?<=GAD65\\s)\\d+")),
         
         
         IA_2 = as.double(str_extract(sample_tags,
                                      "(?<=IA\\-2\\s)\\d+")),
         
         
         IAA = as.double(str_extract(sample_tags,
                                     "(?<=IAA )[-+]?[0-9]*\\.?[0-9]+")),
         
         
         ZnT8 = as.double(str_extract(sample_tags,
                                      "(?<=ZnT8\\s)\\d+\\.\\d+"))
        ) |> 
    mutate(
      HLA_A = str_extract_all(sample_tags,
                        pattern = "(?<=HLA\\-{1}A\\*{1})\\d{4}"),

      HLA_B = str_extract_all(sample_tags,
                              pattern = "(?<=HLA\\-{1}B\\*{1})\\d{4}"),
      
      HLA_C = str_extract_all(sample_tags,
                              pattern = "(?<=HLA\\-{1}C\\*{1})\\d{4}"),
      
      HLA_DPA1 = str_extract_all(sample_tags,
                                 pattern = "(?<=HLA\\-{1}DPA1\\*{1})\\d{4}"),
      
      HLA_DPB1 = str_extract_all(sample_tags,
                                 pattern = "(?<=HLA\\-{1}DPB1\\*{1})\\d{4}"),
      
      HLA_DQA1 = str_extract_all(sample_tags,
                                 pattern = "(?<=HLA\\-{1}DQA1\\*{1})\\d{4}"),
      
      HLA_DQB1 = str_extract_all(sample_tags,
                                 pattern = "(?<=HLA\\-{1}DQB1\\*{1})\\d{4}"),
      
      HLA_DRB1 = str_extract_all(sample_tags,
                                 pattern = "(?<=HLA\\-{1}A\\*{1})\\d{4}")
         )  |>
         
  unnest_wider(col=starts_with("HLA_"),names_sep=",") |> 
  
  select(!sample_tags)
```

### Join Data

```{r}
full_data <- meta_data |>
  inner_join(patient_data, by = "sample_name")
```

### Write Data

```{r}
full_data |>
  write_tsv("./../data/02_dat_clean.tsv")
```



# 03_augment data

---
title: "04_augment.qmd"
format: html
editor: visual
---

```{r}
library("tidyverse")
```

```{r}
read_tsv("./../data/02_dat_clean.tsv") |>
  filter(!str_detect(sample_name, "Denver")) |> 
  arrange(case_control, id, timepoint) |> 
  write_tsv("./../data/03_dat_aug.tsv")
```



# 04_describe data

---
title: "03_describe.qmd"
format: html
editor: visual
---

### Load Libraries

```{r}
library("tidyverse")
```

### Load Data

```{r}
#|message: false
data <- read_tsv("./../data/02_dat_clean.tsv")
```

### Data

```{r}
data |>
  head(10)
```

### Variables

```{r}
# All the variables in our data.
data |>  
  ls()
```


```{r}
#quarto_render("00_all.qmd", output_format = "html", as_job = FALSE)
```

